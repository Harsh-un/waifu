import aiogram.utils.markdown
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.utils.markdown import *
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = '1824001340:AAGDH1gB5HSoBc8dGQToPqAUIRPER_o44hE'

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


button_hi = KeyboardButton('–ü—Ä–∏–≤–µ—Ç! üëã')
greet_kb = ReplyKeyboardMarkup()
greet_kb.insert(button_hi)
greet_kb.insert(button_hi)


button1 = KeyboardButton('1Ô∏è‚É£')
button2 = KeyboardButton('2Ô∏è‚É£')
button3 = KeyboardButton('3Ô∏è‚É£')
markup5 = ReplyKeyboardMarkup().row(
    button1, button2, button3
).add(KeyboardButton('–°—Ä–µ–¥–Ω–∏–π —Ä—è–¥'))


inline_btn_1 = InlineKeyboardButton('–ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞!', callback_data='button1')
inline_kb_full = InlineKeyboardMarkup(row_width=2).add(inline_btn_1)
inline_kb_full.add(InlineKeyboardButton('–í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞', callback_data='btn2'))
inline_btn_3 = InlineKeyboardButton('–∫–Ω–æ–ø–∫–∞ 3', callback_data='btn3')
inline_btn_4 = InlineKeyboardButton('–∫–Ω–æ–ø–∫–∞ 4', callback_data='btn4')
inline_btn_5 = InlineKeyboardButton('–∫–Ω–æ–ø–∫–∞ 5', callback_data='btn5')
inline_kb_full.add(inline_btn_3, inline_btn_4, inline_btn_5)
inline_kb_full.row(inline_btn_3, inline_btn_4, inline_btn_5)
inline_kb_full.insert(InlineKeyboardButton("query=''", switch_inline_query=''))
inline_kb_full.insert(InlineKeyboardButton("query='qwerty'", switch_inline_query='qwerty'))
inline_kb_full.insert(InlineKeyboardButton("Inline –≤ —ç—Ç–æ–º –∂–µ —á–∞—Ç–µ", switch_inline_query_current_chat='wasd'))
inline_kb_full.add(InlineKeyboardButton('–£—Ä–æ–∫–∏ aiogram', url='https://surik00.gitbooks.io/aiogram-lessons/content/'))


# bot.py
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn'))
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)
    if code == 2:
        await bot.answer_callback_query(callback_query.id, text='–ù–∞–∂–∞—Ç–∞ –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞')
    elif code == 5:
        await bot.answer_callback_query(
            callback_query.id,
            text='–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º 5.\n–ê —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ üòâ', show_alert=True)
    else:
        await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f'–ù–∞–∂–∞—Ç–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞! code={code}')


@dp.message_handler(commands=['1'])
async def process_1_command(message: types.Message):
    await message.reply("–í–æ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∞:\n\n", reply_markup=inline_kb_full)


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!")


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply("–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–ø—Ä–ø–∞–≤–ª—é —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Ç–µ–±–µ –≤ –æ—Ç–≤–µ—Ç!", reply_markup=markup5)


@dp.message_handler()
async def echo_message(msg: types.Message):
    await bot.send_message(msg.from_user.id, text(bold("msg = "), msg.text), parse_mode=ParseMode.MARKDOWN, reply_markup=greet_kb)


if __name__ == '__main__':
    executor.start_polling(dp)
